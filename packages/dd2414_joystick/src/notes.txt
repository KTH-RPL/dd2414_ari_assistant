lass JoyConversion
{
public:
    JoyConversion()
    {
        // Subscribe to the "joy" topic to get joystick inputs
        joy_sub_ = nh_.subscribe("joy", 10, &JoyConversion::joyCallback, this);

        // Publisher for the robot's velocity command
        cmd_vel_pub_ = nh_.advertise<geometry_msgs::Twist>("/mobile_base_controller/cmd_vel", 10);
    }

    void joyCallback(const sensor_msgs::Joy::ConstPtr& msg)
    {
        // Create a new Twist message for robot velocity control
        geometry_msgs::Twist cmd_vel;

        // Check for pure rotation (axes[0] to control rotation without linear motion)
        if (fabs(msg->axes[0]) > 0.1)  // Threshold to detect if the joystick is used for rotation
        {
            // Set linear velocity to 0 (no forward/backward movement)
            cmd_vel.linear.x = 0.0;
            // Set angular velocity based on axes[0], limited to 0.5
            cmd_vel.angular.z = std::max(std::min(msg->axes[0], 0.5f), -0.5f);
        }
        else
        {
            // Use axes[2] for linear velocity (forward/backward), limited to 1.0
            cmd_vel.linear.x = std::max(std::min(msg->axes[2], 1.0f), -1.0f);

            // Use axes[3] for angular velocity (left-right turning), limited to 1.0
            cmd_vel.angular.z = std::max(std::min(msg->axes[3], 1.0f), -1.0f);
        }

        // Publish the velocity command
        cmd_vel_pub_.publish(cmd_vel);
    }

private:
    ros::NodeHandle nh_;
    ros::Subscriber joy_sub_;
    ros::Publisher cmd_vel_pub_;
};

int main(int argc, char** argv)
{
    // Initialize ROS node
    ros::init(argc, argv, "joy_conversion_node");

    // Create the JoyConversion object to handle the subscription and publishing
    JoyConversion joy_conversion_node;

    ros::Rate loop_rate(10);

    // Spin to continuously process incoming messages
    ros::spin();

    return 0;
}


class JoyConversion{
    public:
        JoyConversion()
        {
            joy_sub = nh_.subscribe("joy",1000, )
            ros::Subscriber sub = nh.subscribe("joy", 1000, chatterCallback);
        }

        void send_cmd();
    protected:
        void joy_callback(const sensor_msgs::Joy::COnstPtr& joy);

    private:
    ros::NodeHandle nh;

    ros::Publisher vel_pub;
    ros::Subscriber joy_sub;
    geometry_msgs::Twist cmd_vel;

    double linear_scale_x = 0;

}


void chatterCallback(const sensor_msgs::Joy::ConstPtr& msg)
{
    ROS_INFO("I Heard Axes[0]: [%f]", msg->axes[0]);
}

int main(int argc, char **argv)
{
    ros::init(argc, argv, "joy_conversion_node");
    ros::NodeHandle nh; 
    // Pub
    ros::Publisher pub = nh.advertise<geometry_msgs::Twist>("/mobile_base_controller/cmd_vel", 1000);
    

    srand(time(0));
    ros::Rate loop_rate(10);
    
    /**
     * A count of how many messages we have sent. This is used to create
     * a unique string for each message.
     */
    
    JoyConversion node;
    
//    while (ros::ok())
//    {
        /**
         * This is a message object. You stuff it with data, and then publish it.
         */
//        geometry_msgs::Twist msg;
//        std::stringstream ss;
        
//        msg.linear.x = double(rand())/double(RAND_MAX);
//        msg.linear.z = 2*(double(rand())/double(RAND_MAX));
//        ss << "Count: " << count;

//        cout << ss;
        //ROS_INFO("%s", msg);
//        ROS_INFO_STREAM("Sending random velocity command:"<<" linear="<<msg.linear.x<<" angular="<<msg.angular.z);

//        pub.publish(msg);
        
//        ros::spinOnce();
        
//        loop_rate.sleep();
//        ++count;
//    } 
    ros::spin();
    return 0;
}
